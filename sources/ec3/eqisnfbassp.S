/*M                                                                             
.SH NAME                                                                
eqisnfbassp - elliptic curve over quadratic number field with integral 
coefficients, short normal form, basis (special version)
                                                                                
.SH SYNOPSIS                   
.nf                                                     
#include<_ec3.h>                                                                
                                                                      
list eqisnfbassp(E,L,lambda)
list E,L;
floating lambda;
                                                                                
.SH DESCRIPTION                                                                 
eqisnfbassp() returns a basis of an elliptic curve E over a quadratic
number field K = Q(D^(1/2)) 
.PP                                                                             
.TP 4                                                                           
.B E                                                                            
is a list containing all information about the elliptic curve defined over K (see 'ecqnfinit').                                                                 
.TP 4
.B L
is a list containing r linearly independent points, where r is the rank of
E(K).
.TP 4
.B lambda
is an estimate for the minimal Neron-Tate heigt of non torsion points
(see ecqnfminnth.S)
M*/                                                                             
/*H                                                                             
        Version 1       16.12.1998      S. Schmitt                              
   DATE eqisnfbassp     :    981215 
H*/                                                                             
                                                                                
                                                                                
# include <_ec3.h>                                                              

/**************************************************************************/    
/***                 s t a t i c   f u n c t i o n s                    ***/    
/***                      ( B e g i n n i n g )                         ***/    
/**************************************************************************/    

/*c
ecqnfrptie - elliptic curve over quadratic number field, r linearly independe
nt points, index estimate

single ecqnfrptie(d,E,L,lamb)
int d;
list   E,L;
floating lamb;

ecqnfrptie() returns an estimate for the index of the group generated by
the points in L in the group E(K).
lamb ist eine Abschaetzung fuer die minimale Neron-Tate Hoehe.
c*/

single ecqnfrptie( d, E,L, lambda )                                 
int d;
list E,L;                                                                       
floating lambda;
{
                                                                                
        floating reg, ind;
        single in,r;
                                                                                
        init(reg,ind);
        bind( d,E,L,lambda );

                                                                                
        r = llength(L);
	switch(r)   
        {                                                                       
                case 1: ind = itofl(1);                                         
                        break;                                                  
                case 2: ind = Cfltofl(1.1547);                                  
                        break;                                                  
                case 3: ind = Cfltofl(1.2599);                                  
                        break;                                                  
                case 4: ind = Cfltofl(1.4142);                                  
                        break;                                                  
                case 5: ind = Cfltofl(1.5157);                                  
                        break;                                                  
                case 6: ind = Cfltofl(1.6654);                                  
                        break;                                                  
                case 7: ind = Cfltofl(1.8114);                                  
                        break;                                                  
                case 8: ind = itofl(8);                                         
                        break;                                                  
                default: printf(" noch nicht fertig \n");                       
                        return(0);                                              
                        break;                                                  
        }          
	ind = flquot(ind,lambda);
        ind = flsexp(ind,r);
                                                                                
        reg = ecqnfreg(d,E,L);
        ind = flprod(reg,ind);
        ind = flsqrt(ind);
        in = flfloor(ind);
                                                                                
        return(in);
}

/*c                                                                             
        pol eqisnfphip(d,E,p)                                                   
                                                                                
        elliptic curve in short Weierstrass normal form over quadratic          
        number field, phi_p                                                     
                                                                                
        Berechnet das Multiplikationspolynom phi_p. (p Primzahl)                
c*/                                                                             
                                                                                
pol eqisnfphip(D,PEC,E,p)                                                       
list D,PEC,E;                                                                   
single p;                                                                       
{                                                                               
        pol P,H,I;                                                              
        single m;                                                               
                                                                                
        bind(D,PEC,E);                                                          
        init(P,H,I);
                                                                                
        if(p==2)
        {
                nfel b;
                int d;
                init(b,d);
                                                                                
                d = ecqnfflddisc(E);
                P = _0;
                                                                                
                b = eqisnfb8(E);
                if(b)                                                           
                {       b = qnfneg(d,b);                                        
                        P = list2(0,b);                                         
                }                                                               
                                                                                
                b = eqisnfb6(E);
                if(b)
                {       b = qnfsum(d,b,b);
                        b = qnfneg(d,b);
                        P = lcomp2(1,b,P);
                }
                                                                                
                b = eqisnfb4(E);
                if(b)
                {       b = qnfneg(d,b);
                        P = lcomp2(2,b,P);
                }
                                                                                
                b = itonf(1);                                                   
                P = lcomp2(4,b,P);                                              
                P = list2(0,P);                                                 
                return(P);
        }
                                                                                
        H = eqisnfdivpol(E,p);  /** psi_{p} **/
        H = pnfprod(2,D,H,H);
        I = itonf(1);
        I = list2(1,I);
        I = list2(0,I);         /** x **/
        P = pnfprod(2,D,H,I);
                                                                                        m = isum(p,1);                                                          
        H = eqisnfdivpol(E,m);  /** psi_{p+1} **/                               
        m = idif(p,1);                                                          
        I = eqisnfdivpol(E,m);  /** psi_{p-1} **/                               
        H = pnfprod(2,D,H,I);                                                   
                                                                                
        H = pnfdif(2,D,P,H);
        I = pnfqrem(2,D,H,PEC,&P);
                                                                                
        return(P);
                                                                                
                                                                                
                                                                                
}
/*c                                                                             
        list epinit(d,E)                                                        
                                                                                
        initialisiert die Dinge                                                 
c*/                                                                             
                                                                                
list epinit(d,E)                                                                
int d;                                                                          
list E;                                                                         
{                                                                               
        list H,PEC;                                                             
        nfel a4,a6;                                                             
                                                                                
        bind(d,E);                                                              
        init(H,PEC);                                                            
        init(a4,a6);                                                            
                                                                                
/** y^2 - x^3 - a4x - a6 **/                                                    
        a4 = eqisnfa4(E);                                                       
        a6 = eqisnfa6(E);                                                       
        PEC = _0;                                                               
        if(a6)                                                                  
        {                                                                       
                H = qnfneg(d,a6);                                               
                PEC = list2(0,H);                                               
        }                                                                       
        if(a4)                                                                  
        {                                                                       
                H = qnfneg(d,a4);                                               
                PEC = lcomp(H,PEC);                                             
                PEC = lcomp(1,PEC);                                                     }                                                                       
        H = itonf(-1);
        PEC = lcomp(H,PEC);
        PEC = lcomp(3,PEC);
        PEC = list2(0,PEC);
        H = itonf(1);
        H = list2(0,H);
        PEC = lcomp(H,PEC);
        PEC = lcomp(2,PEC);
                                                                                
        H = list4(2,1,0,ineg(d));
        H = ptodp(1,H);
                                                                                
        H = list2(H,PEC);
        return(H);
}







/*c
		single isinddp1(E,p,L,D,PEC,Q)

c*/

single isinddp1(d,E,p,L,D,PEC,Q)
int d;
list E;
single p;
list L,D,PEC,*Q;
{
	list P,Phip,Divp;
	single a,i;

	init(P,Phip,Divp);
	bind(d,E,L,D,PEC,*Q);

	Phip = eqisnfphip(D,PEC,E,p);
	Phip = lsecond(Phip);

	P = lfirst(L);

	if(p==2) 
	{
	 	Divp=_0;	
		if(ispteqisnfppt(D,PEC,E,P,p,Q,Phip,Divp)) return(1);
		return(0);
	}

	Divp = eqisnfdivpol(E,p);
	Divp = lsecond(Divp);

	a = idif(p,1);
	a = iquot(a,2);
	L = P;
	for(i=1;i<=a;i++)
	{
printf(" * i= %obj \n",i);
		if(ispteqisnfppt(D,PEC,E,P,p,Q,Phip,Divp)) return(1);
		P = eqisnfsum(d,E,P,L);
	}
	return(0);
}

/*c
		single isinddp2(E,p,L,D,PEC,Q)

c*/

single isinddp2(d,E,p,L,D,PEC,Q)
int d;
list E;
single p;
list L,D,PEC,*Q;
{
	list P1,P2,M,Phip,Divp;
	single a,i,j;

	init(P1,P2,M,Phip,Divp);
	bind(d,E,L,D,PEC,*Q);

	P1 = lfirst(L);
	P2 = lsecond(L);

	Phip = eqisnfphip(D,PEC,E,p);
	Phip = lsecond(Phip);

	if(p==2) 
	{
		Divp = _0;
		if(ispteqisnfppt(D,PEC,E,P1,p,Q,Phip,Divp)) return(1);
		if(ispteqisnfppt(D,PEC,E,P2,p,Q,Phip,Divp)) return(1);
		L = eqisnfsum(d,E,P1,P2);
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);

		return(0);
	}

	Divp = eqisnfdivpol(E,p);
	Divp = lsecond(Divp);

	a = idif(p,1);
	a = iquot(a,2);
	L = P2;
	for(i=1;i<=a;i++)
	{
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);
		L = eqisnfsum(d,E,P2,L);
	}
	L = P1;
	for(i=1;i<=a;i++)
	{
		j = ineg(a);
		M = eqisnfmul(d,E,P2,j);
		M = eqisnfsum(d,E,M,L);

		for(j=ineg(a);j<=a;j++)
		{
			if(ispteqisnfppt(D,PEC,E,M,p,Q,Phip,Divp)) return(1);
			M = eqisnfsum(d,E,P2,M);
		}
		L = eqisnfsum(d,E,P1,L);
	}
	return(0);
}

/*c
		single isinddp3(E,p,L,D,PEC,Q)

c*/

single isinddp3(d,E,p,L,D,PEC,Q)
int d;
list E;
single p;
list L,D,PEC,*Q;
{
	list P1,P2,P3,M,N,Phip,Divp;
	single a,i,j,k;

	init(P1,P2,P3,M,N,Phip,Divp);
	bind(d,E,L,D,PEC,*Q);

	P1 = lfirst(L);
	P2 = lsecond(L);
	P3 = lthird(L);

	Phip = eqisnfphip(D,PEC,E,p);
	Phip = lsecond(Phip);

	if(p==2) 
	{
		Divp = _0;
		if(ispteqisnfppt(D,PEC,E,P1,p,Q,Phip,Divp)) return(1);
		if(ispteqisnfppt(D,PEC,E,P2,p,Q,Phip,Divp)) return(1);
		if(ispteqisnfppt(D,PEC,E,P3,p,Q,Phip,Divp)) return(1);

		L = eqisnfsum(d,E,P1,P2);
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);
		L = eqisnfsum(d,E,P1,P3);
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);
		L = eqisnfsum(d,E,P2,P3);
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);

		L = eqisnfsum(d,E,L,P1);
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);

		return(0);
	}

	Divp = eqisnfdivpol(E,p);
	Divp = lsecond(Divp);

	a = idif(p,1);
	a = iquot(a,2);
	L = P3;
	for(i=1;i<=a;i++)
	{
		if(ispteqisnfppt(D,PEC,E,L,p,Q,Phip,Divp)) return(1);
		L = eqisnfsum(d,E,P3,L);
	}
	L = P2;
	for(i=1;i<=a;i++)
	{
		j = ineg(a);
		M = eqisnfmul(d,E,P3,j);
		M = eqisnfsum(d,E,M,L);

		for(j=ineg(a);j<=a;j++)
		{
			if(ispteqisnfppt(D,PEC,E,M,p,Q,Phip,Divp)) return(1);
			M = eqisnfsum(d,E,P3,M);
		}
		L = eqisnfsum(d,E,P2,L);
	}
	L = P1;
	for(k=1;k<=a;k++)
	{
		i = ineg(a);
		N = eqisnfmul(d,E,P2,i);
		N = eqisnfsum(d,E,N,L);
		for(i=ineg(a);i<=a;i++)
		{
			j = ineg(a);
			M = eqisnfmul(d,E,P3,j);
			M = eqisnfsum(d,E,M,N);
	
			for(j=ineg(a);j<=a;j++)
			{
				if(ispteqisnfppt(D,PEC,E,M,p,Q,Phip,Divp)) return(1);
				M = eqisnfsum(d,E,P3,M);
			}
			N = eqisnfsum(d,E,P2,M);
		}
		L = eqisnfsum(d,E,P1,L);
	}
	return(0);
}




/*c
	single isinddivbp(r,E,p,L,D,PEC,&Q)

	is index divisible by p?
c*/

single isinddivbp(d,r,E,p,L,D,PEC,Q)
int d;
single r;
list E;
single p;
list L,D,PEC,*Q;
{
	bind(d,E,L,D,PEC,*Q);
	if(r==1 && isinddp1(d,E,p,L,D,PEC,Q)) return(1);
	if(r==2 && isinddp2(d,E,p,L,D,PEC,Q)) return(1);
	if(r==3 && isinddp3(d,E,p,L,D,PEC,Q)) return(1);
	if(r>3) printf("noch nicht geschrieben \n");
	return(0);
}


/*c
	list lpnew(L,Q)
c*/

list lpnew(r,d,E,L,Q)
single r;
int d;
list E,L,Q;
{
	bind(d,E,L,Q);

	if(r==1) return(list1(Q));
	if(r==2)
	{
		list H;
		init(H);
		
		H = lfirst(L);
		H = list2(H,Q);
		if(ecqnfptlin(d,E,H)) return(H);
		H = lsecond(L);
		H = list2(H,Q);
		return(H);
	}
	if(r==3)
	{
		list H,I,J;
		init(H,I,J);

		H = lfirst(L);
		I = lsecond(L);
		J = lthird(L);

		L = list3(H,I,Q);
		if(ecqnfptlin(d,E,L)) return(L);
		L = list3(H,Q,J);
		if(ecqnfptlin(d,E,L)) return(L);
		L = list3(Q,I,J); 
		return(L);
	}
	else printf("noch nicht implementiert \n");
	return(L);

}
	



/**********************************************************************/        
/***                                                                ***/        
/***               s t a t i c   f u n c t i o n s                  ***/        
/***                          ( E n d )                             ***/
/***                                                                ***/
/***                                                                ***/
/***     B e g i n n i n g   o f   t h e   m a i n   p a r t        ***/
/***                                                                ***/
/**********************************************************************/        


list eqisnfbassp(E,L,lambda)
list E,L;
floating lambda;
{	
    list B;
	
    init(B);
    bind(E,L,lambda);
    
    if(lthird(E)!=_0) 
    {
	B = lthird(E);
	B = lred(B);
    }
    if( lthird(E)==_0 || lsixth(B)==_0)
    {
	list PL,Q,D,PEC;
	int d;
	single ind,p,r;

	init(PL,Q,D,PEC,d);

	/*   Basis noch nicht berechnet   */

	d = ecqnfflddisc(E);
	PL = epinit(d,E);
	PEC = lsecond(PL);
	D = lfirst(PL);

	r = llength(L);

	while(1)
	{
		ind = ecqnfrptie(d,E,L,lambda);
		if(ind == 1) break;
		PL = ipgen(1,ind);
		while(PL!=_0)
		{
			p = lfirst(PL);
printf(" Test: %obj \n",p);
			if(isinddivbp(d,r,E,p,L,D,PEC,&Q)) 
			{
printf(" gefunden! Q = %obj \n",Q);
				L = lpnew(r,d,E,L,Q);
				break;
			}
			PL = lred(PL);	
		}
		if(PL==_0) break;
	}


        B = lthird( E );

	leset( B, 7, L );
	leset(  E, 3, B );

	return(L);
   }
   return(lsixth(B));

}
