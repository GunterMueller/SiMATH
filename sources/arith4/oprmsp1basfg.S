/*M
.SH NAME
oprmsp1basfg - order over polynomial ring over modular single prime, transcendence degree 1, basis from genera-tors

.SH SYNOPSIS
.nf
#include<_arith4.h>

list oprmsp1basfg(p, F, L) 
single p; 
pol F; 
list L;

.SH DESCRIPTION
.TP 4
.B p
is a prime number, p < BASIS.
.TP 4
.B F
is the defining polynomial of a separable algebra, say A, over (Z/pZ) (x), the rational function field over Z/pZ, i.e. F is a monic, separable and univariate
polynomial over the polynomial ring (Z/pZ) [x].  
.TP 4
.B L
is a non empty list containing  CD-polynomials over (Z/pZ)(x). The polynomials represent elements in A over (Z/pZ)(x). Let MOD be the module generated by these elements over (Z/pZ)[x]. Let n be the degree of F and a the element, represented by the first polyno-mial in L. then, the elements
.IP
1, a, a^2, ..., a^(n-1)
.IP
had to be linearly independent over (Z/pZ)[x].
.PP
oprmsp1basfg returns a CD-matrix, representing a (Z/pZ)[x]-basis of MOD in Hermite normal form (s. cdmarfmsp1id).

.SH SEE ALSO
.nf
cdmarfmsp1id
cdprfmsp1fcl

M*/
      
/*H
	Version 1       09.01.90        J.Schmitt                      
   DATE oprmsp1basfg  : 901120
H*/

#include<_arith4.h>

list oprmsp1basfg(p,F,L)
single p;
pol F;
list L;
{
	pol E,T,a,b;
	list M,Ml,Mp;
	single i,j,t,n;
	init(E,T,a,b,M,Ml,Mp);
	bind(F,L);

	E = list2(0,1);
	n = lfirst(F);
	a = lfirst(L);
	L = lred(L);
	b = list3(E,1,E);
	t = oequal(a,b);
                 
	if (t) T = list2(0,1);
	else T = 0;
	b = list3(E,0,E);
	M = _0;
	if (t) M = cdmarfmsp1id(n);
	else {
		for (i=1;i<=n;i++) {
			Ml = clfcdprfmsp1(b,n);
			M = lcomp(Ml,M);
			b = afmsp1prodsp(p,F,a,b,0);
		}
		M = cdmarfmsp1hr(p,M);
	}
	while ( L != _0 ) {
		a = lfirst(L);                              
		L = lred(L);
		if ( t ) a = cdprfmsp1mh(p,a,E);      
		i = 1;
		while ( (i<n) && (a!=0) ) {
			Mp = M;
			for (j=1;j<=n;j++) {
				Ml = lfirst(Mp);
				Mp = lred(Mp);
				b = cdprfmsp1fcl(Ml,p);
				b = afmsp1prodsp(p,F,a,b,T);
				if ( b != 0 ) {
					Ml = clfcdprfmsp1(b,n);
					M = lcomp(Ml,M);
				}
			}  
			M = cdmarfmsp1hr(p,M);                                           
			a = afmsp1prodsp(p,F,a,a,T);
			i = i + i;
		}
	}
	return(M);
}
